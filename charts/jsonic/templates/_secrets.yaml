{{/*
Return the secret name to use for environment variables.
*/}}
{{- define "jsonic.secretName" -}}
  {{- if .Values.existingSecret -}}
    {{- .Values.existingSecret -}}
  {{- else -}}
    {{- include "jsonic.fullname" . -}}
  {{- end -}}
{{- end -}}


{{/*
Return the ClickHouse host based on the ClickHouse chart or external ClickHouse settings
*/}}
{{- define "jsonic.secret.clickhouseHost" -}}
  {{- if .Values.clickhouse.enabled -}}
    {{- printf "%s-clickhouse.%s.svc.%s:8123" .Release.Name (include "jsonic.namespace" .) .Values.clusterDomain -}}
  {{- else if .Values.externalClickhouse.host -}}
    {{- printf "%s:%d" .Values.externalClickhouse.host (.Values.externalClickhouse.port | int) -}}
  {{- else -}}
    {{- "" -}}
  {{- end -}}
{{- end -}}

{{/*
Return the ClickHouse password based on the ClickHouse chart or external ClickHouse settings
*/}}
{{- define "jsonic.secret.clickhousePassword" -}}
  {{- if .Values.clickhouse.enabled -}}
    {{- $password := .Values.clickhouse.auth.password -}}
    {{- if not $password -}}
      {{- $namespace := include "jsonic.namespace" . -}}
      {{- $clickhouseSecretName := printf "%s-clickhouse" .Release.Name -}}
      {{- $password = include "jsonic.secret.lookupValue" (dict "name" $clickhouseSecretName "namespace" $namespace "key" "admin-password") -}}
    {{- end -}}
    {{- $password -}}
  {{- else -}}
    {{- $password := .Values.externalClickhouse.password -}}
    {{- if and (not $password) .Values.externalClickhouse.existingSecret -}}
      {{- $namespace := include "jsonic.namespace" . -}}
      {{- $secretKey := .Values.externalClickhouse.existingSecretPasswordKey | default "password" -}}
      {{- $password = include "jsonic.secret.lookupValue" (dict "name" .Values.externalClickhouse.existingSecret "namespace" $namespace "key" $secretKey) -}}
    {{- end -}}
  {{- $password -}}
  {{- end -}}
{{- end -}}

{{/*
Return the ClickHouse user based on the ClickHouse chart or external ClickHouse settings
*/}}
{{- define "jsonic.secret.clickhouseUser" -}}
  {{- if .Values.clickhouse.enabled -}}
    {{- .Values.clickhouse.auth.username -}}
  {{- else -}}
    {{- .Values.externalClickhouse.user -}}
  {{- end -}}
{{- end -}}

{{/*
Return the database URL based on the PostgreSQL chart or external database settings
*/}}
{{- define "jsonic.secret.databaseUrl" -}}
  {{- if .Values.postgresql.enabled -}}
    {{- $namespace := include "jsonic.namespace" . -}}
    {{- $host := printf "%s-postgresql.%s.svc.%s" .Release.Name $namespace .Values.clusterDomain -}}
    {{- $port := 5432 -}}
    {{- $user := .Values.postgresql.auth.username -}}
    {{- $database := .Values.postgresql.auth.database -}}
    {{- $password := .Values.postgresql.auth.password -}}
    {{- if not $password -}}
      {{- $postgresSecretName := printf "%s-postgresql" .Release.Name -}}
      {{- $password = include "jsonic.secret.lookupValue" (dict "name" $postgresSecretName "namespace" $namespace "key" "password") -}}
    {{- end -}}
    {{- include "jsonic.secret.formatPostgresUrl" (dict "host" $host "port" $port "user" $user "password" $password "database" $database) -}}
  {{- else if .Values.externalDatabase.sqlConnection -}}
    {{- .Values.externalDatabase.sqlConnection -}}
  {{- else -}}
    {{- $host := .Values.externalDatabase.host -}}
    {{- $port := .Values.externalDatabase.port | default 5432 | int -}}
    {{- $user := .Values.externalDatabase.user -}}
    {{- $database := .Values.externalDatabase.database -}}
    {{- $password := .Values.externalDatabase.password -}}
    {{- if and (not $password) .Values.externalDatabase.existingSecret -}}
      {{- $namespace := include "jsonic.namespace" . -}}
      {{- $secretKey := .Values.externalDatabase.existingSecretPasswordKey | default "password" -}}
      {{- $password = include "jsonic.secret.lookupValue" (dict "name" .Values.externalDatabase.existingSecret "namespace" $namespace "key" $secretKey) -}}
    {{- end -}}
    {{- include "jsonic.secret.formatPostgresUrl" (dict "host" $host "port" $port "user" $user "password" $password "database" $database) -}}
  {{- end -}}
{{- end -}}

{{/*
Generate a secure data encryption key that persists across upgrades
*/}}
{{- define "jsonic.secret.dataEncryptionKey" -}}
  {{- $secretName := include "jsonic.fullname" . -}}
  {{- $existingSecret := include "jsonic.secret.lookupValue" (dict "namespace" .Release.Namespace "name" $secretName "key" "DATA_ENCRYPTION_KEY") -}}
  {{- if $existingSecret -}}
    {{- $existingSecret -}}
  {{- else if .Values.jsonic.backend.dataEncryptionKey -}}
    {{- .Values.jsonic.backend.dataEncryptionKey -}}
  {{- else -}}
    {{- randAlphaNum 32 -}}
  {{- end -}}
{{- end -}}

{{/*
Format a Redis URL for use in configuration files.
Usage: {{- include "jsonic.secret.formatRedisUrl" (dict "host" $host "port" $port "password" $password) -}}
*/}}
{{- define "jsonic.secret.formatRedisUrl" -}}
  {{- $authspec := "" -}}
  {{- $hostspec := .host -}}
  {{- if .password -}}
    {{- $authspec = printf ":%s@" .password -}}
  {{- end -}}
  {{- if .port -}}
    {{- $hostspec = printf "%s:%d" .host .port -}}
  {{- end -}}
  {{- printf "redis://%s%s" $authspec $hostspec -}}
{{- end -}}

{{/*
Format a database URL for use in configuration files.
Usage: {{- include "jsonic.secret.formatPostgresUrl" (dict "host" $host "port" $port "user" $user "password" $password "database" $database "params" $params) -}}
*/}}
{{- define "jsonic.secret.formatPostgresUrl" -}}
  {{- $userspec := "" -}}
  {{- $hostspec := .host -}}
  {{- $dbname := "" -}}
  {{- $paramspec := "" -}}
  {{- if and .user .password -}}
    {{- $userspec = printf "%s:%s@" .user .password -}}
  {{- else if .user -}}
    {{- $userspec = printf "%s@" .user -}}
  {{- end -}}
  {{- if .port -}}
    {{- $hostspec = printf "%s:%d" .host .port -}}
  {{- end -}}
  {{- if .database -}}
    {{- $dbname = printf "/%s" .database -}}
  {{- end -}}
  {{- if .params -}}
    {{- $paramspec = printf "?%s" .params -}}
  {{- end -}}
  {{- printf "postgres://%s%s%s%s" $userspec $hostspec $dbname $paramspec -}}
{{- end -}}

{{/*
Generate a secure JWT secret that persists across upgrades
*/}}
{{- define "jsonic.secret.jwtSecret" -}}
  {{- $secretName := include "jsonic.fullname" . -}}
  {{- $existingSecret := include "jsonic.secret.lookupValue" (dict "namespace" .Release.Namespace "name" $secretName "key" "JWT_SECRET") -}}
  {{- if $existingSecret -}}
    {{- $existingSecret -}}
  {{- else if .Values.jsonic.backend.authToken.jwtSecret -}}
    {{- .Values.jsonic.backend.authToken.jwtSecret -}}
  {{- else -}}
    {{- randAlphaNum 64 -}}
  {{- end -}}
{{- end -}}

{{/*
Return the value of a secret key. An empty string is returned if the key is not found.
Usage: {{- include "jsonic.secret.lookupValue" (dict "name" "my-secret" "namespace" "my-namespace" "key" "my-key") -}}
*/}}
{{- define "jsonic.secret.lookupValue" -}}
  {{- $secret := (lookup "v1" "Secret" .namespace .name) -}}
  {{- if and $secret $secret.data (hasKey $secret.data .key) -}}
    {{- index $secret.data .key | b64dec | trimAll "\n" -}}
  {{- end -}}
{{- end }}

{{/*
Return the Redis URL based on the Redis chart or external Redis settings
*/}}
{{- define "jsonic.secret.redisUrl" -}}
  {{- if .Values.redis.enabled -}}
    {{- $namespace := include "jsonic.namespace" . -}}
    {{- $host := printf "%s-redis-master.%s.svc.%s" .Release.Name $namespace .Values.clusterDomain -}}
    {{- $port := 6379 -}}
    {{- $password := .Values.redis.auth.password -}}
    {{- if not $password -}}
      {{- $redisSecretName := printf "%s-redis" .Release.Name -}}
      {{- $password = include "jsonic.secret.lookupValue" (dict "name" $redisSecretName "namespace" $namespace "key" "redis-password") -}}
    {{- end -}}
    {{- include "jsonic.secret.formatRedisUrl" (dict "host" $host "port" $port "password" $password) -}}
  {{- else -}}
    {{- $host := .Values.externalRedis.host -}}
    {{- $port := .Values.externalRedis.port | default 6379 | int -}}
    {{- $password := .Values.externalRedis.password -}}
    {{- if and (not $password) .Values.externalRedis.existingSecret -}}
      {{- $namespace := include "jsonic.namespace" . -}}
      {{- $secretKey := .Values.externalRedis.existingSecretPasswordKey | default "password" -}}
      {{- $password = include "jsonic.secret.lookupValue" (dict "name" .Values.externalRedis.existingSecret "namespace" $namespace "key" $secretKey) -}}
    {{- end -}}
    {{- include "jsonic.secret.formatRedisUrl" (dict "host" $host "port" $port "password" $password) -}}
  {{- end -}}
{{- end -}}

{{/*
Generate a secure session secret that persists across upgrades
*/}}
{{- define "jsonic.secret.sessionSecret" -}}
  {{- $secretName := include "jsonic.fullname" . -}}
  {{- $existingSecret := include "jsonic.secret.lookupValue" (dict "namespace" .Release.Namespace "name" $secretName "key" "SESSION_SECRET") -}}
  {{- if $existingSecret -}}
    {{- $existingSecret -}}
  {{- else if .Values.jsonic.backend.authToken.sessionSecret -}}
    {{- .Values.jsonic.backend.authToken.sessionSecret -}}
  {{- else -}}
    {{- randAlphaNum 64 -}}
  {{- end -}}
{{- end -}}
