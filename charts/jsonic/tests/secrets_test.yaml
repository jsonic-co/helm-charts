suite: Secrets
templates:
  - secrets.yaml
values:
  - ../values.yaml
tests:
  - it: should render backend secrets
    template: secrets.yaml
    set:
      jsonic:
        backend:
          databaseUrl: postgresql://user:password@example.com:5432/database
          authToken:
            jwtSecret: jwt-secret
            sessionSecret: session-secret
          dataEncryptionKey: data-encryption-key
          enterpriseLicenseKey: enterprise-license-key
          auth:
            google:
              clientId: google-client-id
              clientSecret: google-client-secret
            github:
              clientId: github-client-id
              clientSecret: github-client-secret
            microsoft:
              clientId: microsoft-client-id
              clientSecret: microsoft-client-secret
            saml:
              cert: |-
                -----BEGIN CERTIFICATE-----
                MIID...
                -----END CERTIFICATE-----
            oidc:
              clientId: oidc-client-id
              clientSecret: oidc-client-secret
          mailer:
            smtpUrl: smtp://user:password@smtp.example.com:465
            smtpUser: smtp-user
            smtpPassword: smtp-password
          clickhouse:
            user: clickhouse-user
            password: clickhouse-password
          redisUrl: redis://user:password@redis.example.com:6379
    documentIndex: 0
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: Secret
      - equal:
          path: metadata.name
          value: release-name-jsonic
      - isNotNullOrEmpty:
          path: data.DATABASE_URL
      - isNotNullOrEmpty:
          path: data.JWT_SECRET
      - isNotNullOrEmpty:
          path: data.SESSION_SECRET
      - isNotNullOrEmpty:
          path: data.DATA_ENCRYPTION_KEY
      - isNotNullOrEmpty:
          path: data.GOOGLE_CLIENT_ID
      - isNotNullOrEmpty:
          path: data.GOOGLE_CLIENT_SECRET
      - isNotNullOrEmpty:
          path: data.GITHUB_CLIENT_ID
      - isNotNullOrEmpty:
          path: data.GITHUB_CLIENT_SECRET
      - isNotNullOrEmpty:
          path: data.MICROSOFT_CLIENT_ID
      - isNotNullOrEmpty:
          path: data.MICROSOFT_CLIENT_SECRET
      - isNotNullOrEmpty:
          path: data.MAILER_SMTP_URL
      - isNotNullOrEmpty:
          path: data.MAILER_SMTP_USER
      - isNotNullOrEmpty:
          path: data.MAILER_SMTP_PASSWORD
      - isNotNullOrEmpty:
          path: data.ENTERPRISE_LICENSE_KEY
      - isNotNullOrEmpty:
          path: data.SAML_CERT
      - isNotNullOrEmpty:
          path: data.OIDC_CLIENT_ID
      - isNotNullOrEmpty:
          path: data.OIDC_CLIENT_SECRET
      - isNotNullOrEmpty:
          path: data.CLICKHOUSE_USER
      - isNotNullOrEmpty:
          path: data.CLICKHOUSE_PASSWORD
      - isNotNullOrEmpty:
          path: data.REDIS_URL

  - it: should generate secure JWT secret when empty
    set:
      jsonic.backend.authToken.jwtSecret: ""
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - exists:
          path: data.JWT_SECRET
      - notEqual:
          path: data.JWT_SECRET
          value: ""

  - it: should generate secure session secret when empty
    set:
      jsonic.backend.authToken.sessionSecret: ""
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - exists:
          path: data.SESSION_SECRET
      - notEqual:
          path: data.SESSION_SECRET
          value: ""

  - it: should generate secure data encryption key when empty
    set:
      jsonic.backend.dataEncryptionKey: ""
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - exists:
          path: data.DATA_ENCRYPTION_KEY
      - notEqual:
          path: data.DATA_ENCRYPTION_KEY
          value: ""

  - it: should use provided JWT secret when specified
    set:
      jsonic.backend.authToken.jwtSecret: "my-custom-jwt-secret"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: data.JWT_SECRET
          value: "bXktY3VzdG9tLWp3dC1zZWNyZXQ="

  - it: should use provided session secret when specified
    set:
      jsonic.backend.authToken.sessionSecret: "my-custom-session-secret"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: data.SESSION_SECRET
          value: "bXktY3VzdG9tLXNlc3Npb24tc2VjcmV0"

  - it: should use provided data encryption key when specified
    set:
      jsonic.backend.dataEncryptionKey: "12345678901234567890123456789012"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: data.DATA_ENCRYPTION_KEY
          value: "MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI="

  - it: should not create secret when existingSecret is provided
    set:
      existingSecret: "my-existing-secret"
    asserts:
      - hasDocuments:
          count: 0

  - it: should use correct secret key for custom user (password key)
    set:
      postgresql.enabled: true
      postgresql.auth.username: "customuser"
      postgresql.auth.password: "" # Empty password should trigger secret lookup
      postgresql.auth.database: "customdb"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - exists:
          path: data.DATABASE_URL
      # The helper should attempt to look up the "password" key for custom user
      # When password is empty, it should generate a URL with the custom user but no password
      - equal:
          path: data.DATABASE_URL
          value: >-
            cG9zdGdyZXM6Ly9jdXN0b211c2VyQFJFTEVBU0UtTkFNRS1wb3N0Z3Jlc3FsLk5BTUVTUEFDRS5zdmMuY2x1c3Rlci5sb2NhbDo1NDMyL2N1c3RvbWRi

  - it: should use explicit password when provided for custom user
    set:
      postgresql.enabled: true
      postgresql.auth.username: "customuser"
      postgresql.auth.password: "explicitpass"
      postgresql.auth.database: "customdb"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - exists:
          path: data.DATABASE_URL
      - equal:
          path: data.DATABASE_URL
          value: >-
            cG9zdGdyZXM6Ly9jdXN0b211c2VyOmV4cGxpY2l0cGFzc0BSRUxFQVNFLU5BTUUtcG9zdGdyZXNxbC5OQU1FU1BBQ0Uuc3ZjLmNsdXN0ZXIubG9jYWw6NTQzMi9jdXN0b21kYg==
