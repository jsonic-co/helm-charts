suite: Config Map
templates:
  - configmap.yaml
values:
  - ../values.yaml
tests:
  - it: should render frontend parameters when explicitly set
    template: configmap.yaml
    set:
      jsonic:
        frontend:
          baseUrl: https://example.com
          shortcodeBaseUrl: https://example.com/shortcode
          adminUrl: https://example.com/admin
          backendGqlUrl: https://example.com/api/graphql
          backendWsUrl: wss://example.com/api/graphql
          backendApiUrl: https://example.com/api
          appTosLink: https://example.com/tos
          appPrivacyPolicyLink: https://example.com/privacy
          enableSubpathBasedAccess: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: metadata.name
          value: release-name-jsonic
      - equal:
          path: data.VITE_BASE_URL
          value: https://example.com
      - equal:
          path: data.VITE_SHORTCODE_BASE_URL
          value: https://example.com/shortcode
      - equal:
          path: data.VITE_ADMIN_URL
          value: https://example.com/admin
      - equal:
          path: data.VITE_BACKEND_GQL_URL
          value: https://example.com/api/graphql
      - equal:
          path: data.VITE_BACKEND_WS_URL
          value: wss://example.com/api/graphql
      - equal:
          path: data.VITE_BACKEND_API_URL
          value: https://example.com/api
      - equal:
          path: data.VITE_APP_TOS_LINK
          value: https://example.com/tos
      - equal:
          path: data.VITE_APP_PRIVACY_POLICY_LINK
          value: https://example.com/privacy
      - equal:
          path: data.ENABLE_SUBPATH_BASED_ACCESS
          value: "true"

  - it: should render backend parameters when explicitly set
    template: configmap.yaml
    set:
      jsonic:
        backend:
          aioAlternatePort: 3000
          authToken:
            tokenSaltComplexity: 10
            magicLinkTokenValidity: 3
            refreshTokenValidity: "604800000"
            accessTokenValidity: "86400000"
          allowSecureCookies: true
          redirectUrl: https://example.com
          whitelistedOrigins:
            - https://example.com
            - app://example.com
          auth:
            allowedProviders:
              - google
              - github
              - microsoft
              - email
            google:
              callbackUrl: https://example.com/auth/google/callback
              scope:
                - email
                - profile
            github:
              callbackUrl: https://example.com/auth/github/callback
              scope:
                - user:email
            microsoft:
              callbackUrl: https://example.com/auth/microsoft/callback
              scope:
                - user.read
              tenant: common
          mailer:
            smtpEnabled: true
            useCustomConfigs: false
            addressFrom: no-reply@example.com
            smtpHost: smtp.example.com
            smtpPort: 465
            smtpSecure: true
            tlsRejectUnauthorized: true
          rateLimit:
            ttl: 60
            max: 100
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: metadata.name
          value: release-name-jsonic
      - notExists:
          path: data.DATABASE_URL
      - equal:
          path: data.JSONIC_AIO_ALTERNATE_PORT
          value: "3000"
      - equal:
          path: data.TOKEN_SALT_COMPLEXITY
          value: "10"
      - equal:
          path: data.MAGIC_LINK_TOKEN_VALIDITY
          value: "3"
      - equal:
          path: data.REFRESH_TOKEN_VALIDITY
          value: "604800000"
      - equal:
          path: data.ACCESS_TOKEN_VALIDITY
          value: "86400000"
      - equal:
          path: data.ALLOW_SECURE_COOKIES
          value: "true"
      - equal:
          path: data.REDIRECT_URL
          value: https://example.com
      - equal:
          path: data.WHITELISTED_ORIGINS
          value: "https://example.com,app://example.com"
      - equal:
          path: data.VITE_ALLOWED_AUTH_PROVIDERS
          value: "GOOGLE,GITHUB,MICROSOFT,EMAIL"
      - equal:
          path: data.GOOGLE_CALLBACK_URL
          value: https://example.com/auth/google/callback
      - equal:
          path: data.GOOGLE_SCOPE
          value: "email,profile"
      - equal:
          path: data.GITHUB_CALLBACK_URL
          value: https://example.com/auth/github/callback
      - equal:
          path: data.GITHUB_SCOPE
          value: "user:email"
      - equal:
          path: data.MICROSOFT_CALLBACK_URL
          value: https://example.com/auth/microsoft/callback
      - equal:
          path: data.MICROSOFT_SCOPE
          value: "user.read"
      - equal:
          path: data.MICROSOFT_TENANT
          value: common
      - equal:
          path: data.MAILER_SMTP_ENABLE
          value: "true"
      - equal:
          path: data.MAILER_USE_CUSTOM_CONFIGS
          value: "false"
      - equal:
          path: data.MAILER_ADDRESS_FROM
          value: no-reply@example.com
      - equal:
          path: data.MAILER_SMTP_HOST
          value: smtp.example.com
      - equal:
          path: data.MAILER_SMTP_PORT
          value: "465"
      - equal:
          path: data.MAILER_SMTP_SECURE
          value: "true"
      - notExists:
          path: data.MAILER_SMTP_USER
      - notExists:
          path: data.MAILER_SMTP_PASSWORD
      - equal:
          path: data.MAILER_TLS_REJECT_UNAUTHORIZED
          value: "true"
      - equal:
          path: data.RATE_LIMIT_TTL
          value: "60"
      - equal:
          path: data.RATE_LIMIT_MAX
          value: "100"

  - it: should render enterprise parameters when explicitly set
    template: configmap.yaml
    set:
      jsonic:
        frontend:
          localProxyServerEnabled: true
          proxyAppUrl: https://proxy.example.com
        backend:
          auth:
            githubEnterprise:
              enabled: true
              authorizationUrl: https://github.example.com/login/oauth/authorize
              tokenUrl: https://github.example.com/login/oauth/access_token
              userProfileUrl: https://github.example.com/users
              userEmailUrl: https://github.example.com/user/emails
            saml:
              issuer: https://saml.example.com
              audience: https://example.com
              callbackUrl: https://example.com/v1/auth/saml/callback
              entryPoint: https://saml.example.com/saml
              wantAssertionsSigned: true
              wantResponseSigned: true
            oidc:
              providerName: oidc-provider
              issuer: https://oidc.example.com
              authorizationUrl: https://oidc.example.com/auth
              tokenUrl: https://oidc.example.com/token
              userInfoUrl: https://oidc.example.com/userinfo
              callbackUrl: https://example.com/v1/auth/oidc/callback
            scope:
              - openid
              - profile
              - email
          clickhouse:
            allowAuditLogs: true
          horizontalScalingEnabled: true
      externalClickhouse:
        host: clickhouse.example.com
        port: 8123
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: metadata.name
          value: release-name-jsonic
      - notExists:
          path: data.ENTERPRISE_LICENSE_KEY
      - equal:
          path: data.LOCAL_PROXY_SERVER_ENABLE
          value: "true"
      - equal:
          path: data.PROXY_APP_URL
          value: https://proxy.example.com
      - equal:
          path: data.IS_GITHUB_ENTERPRISE_ENABLED
          value: "true"
      - equal:
          path: data.GITHUB_AUTHORIZATION_URL
          value: https://github.example.com/login/oauth/authorize
      - equal:
          path: data.GITHUB_TOKEN_URL
          value: https://github.example.com/login/oauth/access_token
      - equal:
          path: data.GITHUB_USER_PROFILE_URL
          value: https://github.example.com/users
      - equal:
          path: data.GITHUB_USER_EMAIL_URL
          value: https://github.example.com/user/emails
      - equal:
          path: data.SAML_ISSUER
          value: https://saml.example.com
      - equal:
          path: data.SAML_AUDIENCE
          value: https://example.com
      - equal:
          path: data.SAML_CALLBACK_URL
          value: https://example.com/v1/auth/saml/callback
      - equal:
          path: data.SAML_CERT
          value: ""
      - equal:
          path: data.SAML_ENTRY_POINT
          value: https://saml.example.com/saml
      - equal:
          path: data.SAML_WANT_ASSERTIONS_SIGNED
          value: "true"
      - equal:
          path: data.SAML_WANT_RESPONSE_SIGNED
          value: "true"
      - equal:
          path: data.OIDC_PROVIDER_NAME
          value: oidc-provider
      - equal:
          path: data.OIDC_ISSUER
          value: https://oidc.example.com
      - equal:
          path: data.OIDC_AUTH_URL
          value: https://oidc.example.com/auth
      - equal:
          path: data.OIDC_TOKEN_URL
          value: https://oidc.example.com/token
      - equal:
          path: data.OIDC_USER_INFO_URL
          value: https://oidc.example.com/userinfo
      - notExists:
          path: data.OIDC_CLIENT_ID
      - notExists:
          path: data.OIDC_CLIENT_SECRET
      - equal:
          path: data.OIDC_CALLBACK_URL
          value: https://example.com/v1/auth/oidc/callback
      - equal:
          path: data.OIDC_SCOPE
          value: "openid profile email"
      - equal:
          path: data.ALLOW_AUDIT_LOGS
          value: "true"
      - equal:
          path: data.CLICKHOUSE_HOST
          value: clickhouse.example.com:8123
      - notExists:
          path: data.CLICKHOUSE_USER
      - notExists:
          path: data.CLICKHOUSE_PASSWORD
      - equal:
          path: data.HORIZONTAL_SCALING
          value: "true"
      - notExists:
          path: data.REDIS_URL

  - it: should default custom SMTP port to 587
    template: configmap.yaml
    set:
      jsonic:
        backend:
          mailer:
            smtpPort: 587
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.MAILER_SMTP_PORT
          value: "587"

  - it: should generate auth callback URL for GitHub when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.GITHUB_CALLBACK_URL
          value: https://example.com/backend/v1/auth/github/callback

  - it: should generate auth callback URL for GitHub when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.GITHUB_CALLBACK_URL
          value: https://backend.example.com/v1/auth/github/callback

  - it: should generate auth callback URL for Google when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.GOOGLE_CALLBACK_URL
          value: https://example.com/backend/v1/auth/google/callback

  - it: should generate auth callback URL for Google when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.GOOGLE_CALLBACK_URL
          value: https://backend.example.com/v1/auth/google/callback

  - it: should generate auth callback URL for Microsoft when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.MICROSOFT_CALLBACK_URL
          value: https://example.com/backend/v1/auth/microsoft/callback

  - it: should generate auth callback URL for Microsoft when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.MICROSOFT_CALLBACK_URL
          value: https://backend.example.com/v1/auth/microsoft/callback

  - it: should generate auth callback URL for OIDC when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.OIDC_CALLBACK_URL
          value: https://example.com/backend/v1/auth/oidc/callback

  - it: should generate auth callback URL for OIDC when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.OIDC_CALLBACK_URL
          value: https://backend.example.com/v1/auth/oidc/callback

  - it: should generate auth callback URL for SAML when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.SAML_CALLBACK_URL
          value: https://example.com/backend/v1/auth/saml/callback

  - it: should generate auth callback URL for SAML when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.SAML_CALLBACK_URL
          value: https://backend.example.com/v1/auth/saml/callback

  - it: should generate backend redirect URL when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.REDIRECT_URL
          value: https://example.com

  - it: should generate backend redirect URL when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.REDIRECT_URL
          value: https://frontend.example.com

  - it: should generate backend white listed origins when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.WHITELISTED_ORIGINS
          value: https://example.com,app://example.com

  - it: should generate backend white listed origins when deployment mode is aio and ingress is not enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: false
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.WHITELISTED_ORIGINS
          value: ""

  - it: should generate backend white listed origins when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.WHITELISTED_ORIGINS
          # yamllint disable-line rule:line-length
          value: https://frontend.example.com,app://frontend.example.com,https://backend.example.com,https://admin.example.com

  - it: should generate frontend admin URL when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_ADMIN_URL
          value: https://example.com/admin

  - it: should generate frontend admin URL when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_ADMIN_URL
          value: https://admin.example.com

  - it: should generate frontend backend API URL when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BACKEND_API_URL
          value: https://example.com/backend/v1

  - it: should generate frontend backend API URL when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BACKEND_API_URL
          value: https://backend.example.com/v1

  - it: should generate frontend backend GraphQL URL when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BACKEND_GQL_URL
          value: https://example.com/backend/graphql

  - it: should generate frontend backend GraphQL URL when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BACKEND_GQL_URL
          value: https://backend.example.com/graphql

  - it: should generate frontend backend WebSocket URL when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BACKEND_WS_URL
          value: wss://example.com/backend/graphql

  - it: should generate frontend backend WebSocket URL when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BACKEND_WS_URL
          value: wss://backend.example.com/graphql

  - it: should generate frontend base URL when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BASE_URL
          value: https://example.com

  - it: should generate frontend base URL when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_BASE_URL
          value: https://frontend.example.com

  - it: should generate frontend shortcode base URL when deployment mode is aio and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      aio:
        subpathBasedAccess: true
        ingress:
          enabled: true
          hostname: example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_SHORTCODE_BASE_URL
          value: https://example.com

  - it: should generate frontend shortcode base URL when deployment mode is distributed and ingress is enabled
    template: configmap.yaml
    set:
      deploymentMode: distributed
      frontend:
        ingress:
          enabled: true
          hostname: frontend.example.com
          tls: true
      backend:
        ingress:
          enabled: true
          hostname: backend.example.com
          tls: true
      admin:
        ingress:
          enabled: true
          hostname: admin.example.com
          tls: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.VITE_SHORTCODE_BASE_URL
          value: https://frontend.example.com

  - it: should enable subpath based access when deployment mode is aio and subpath based access is enabled
    template: configmap.yaml
    set:
      deploymentMode: aio
      jsonic:
        frontend:
          enableSubpathBasedAccess: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.ENABLE_SUBPATH_BASED_ACCESS
          value: "true"

  - it: should disable subpath based access when deployment mode is not aio
    template: configmap.yaml
    set:
      deploymentMode: distributed
      jsonic:
        frontend:
          enableSubpathBasedAccess: true
    asserts:
      - containsDocument:
          apiVersion: v1
          kind: ConfigMap
      - equal:
          path: data.ENABLE_SUBPATH_BASED_ACCESS
          value: "false"
